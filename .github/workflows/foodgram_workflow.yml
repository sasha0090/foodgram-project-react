name: Приложение FoodGram

on: [push]

jobs:
  tests:
    name: Тесты
    runs-on: ubuntu-latest

    steps:
      - name: Проверка репозитория
        uses: actions/checkout@v2

      - name: Настройка python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Установка зависимостей
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt

      - name: Проверка с помощью flake8 и тестов django
        run: |
          python -m flake8

  build_push_to_doker_hub:
    name: Отправка Docker образа в Docker Hub
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: Проверка репозитория
        uses: actions/checkout@v2

      - name: Настройка Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Вход в Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Публикация backend в Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
          file: backend/Dockerfile

      - name: Публикация frontend в Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
          file: frontend/Dockerfile

  deploy:
    name: Деплой на сервер
    needs: build_push_to_doker_hub
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Выполнение дистанционных команд ssh для развертывания
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm backend
            sudo docker-compose rm frontend
            sudo rm .env
            
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} > .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env

            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env

            sudo docker-compose up -d
